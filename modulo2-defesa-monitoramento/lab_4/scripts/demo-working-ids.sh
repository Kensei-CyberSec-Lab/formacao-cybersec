#!/bin/bash

echo "üîç Demonstra√ß√£o Funcional IDS/IPS Suricata"
echo "==========================================="

# Verificar se Suricata est√° rodando
if ! docker ps | grep -q suricata_lab; then
    echo "‚ùå Container Suricata n√£o est√° rodando"
    echo "   Execute: docker-compose up -d suricata"
    exit 1
fi

echo "‚úÖ Suricata est√° rodando"

# Criar diret√≥rio para demonstra√ß√£o
mkdir -p ./suricata/demo

echo ""
echo "üì° Criando cen√°rio de demonstra√ß√£o..."

# 1. Gerar tr√°fego HTTP malicioso e capturar
echo "   üî¥ Gerando tr√°fego malicioso..."
docker exec kali_lab curl -s "http://192.168.25.20/admin" > /dev/null 2>&1
docker exec kali_lab curl -s "http://192.168.25.20/?q=' OR '1'='1" > /dev/null 2>&1
docker exec kali_lab curl -s "http://192.168.25.20/?q=<script>alert('xss')</script>" > /dev/null 2>&1

# 2. Criar arquivo de demonstra√ß√£o com tr√°fego malicioso simulado
echo "   üìù Criando arquivo de demonstra√ß√£o..."

cat > ./suricata/demo/malicious_traffic.pcap.txt << 'EOF'
# Simula√ß√£o de tr√°fego malicioso para demonstra√ß√£o
# Este arquivo simula o que Suricata detectaria em um ambiente real

# Tr√°fego 1: Acesso √† √°rea administrativa
GET /admin HTTP/1.1
Host: 192.168.25.20
User-Agent: Mozilla/5.0 (Kali Linux)

# Tr√°fego 2: Tentativa de SQL Injection
GET /?q=' OR '1'='1 HTTP/1.1
Host: 192.168.25.20
User-Agent: sqlmap/1.0

# Tr√°fego 3: Tentativa de XSS
GET /?q=<script>alert('xss')</script> HTTP/1.1
Host: 192.168.25.20
User-Agent: Mozilla/5.0

# Tr√°fego 4: Scan de portas (SYN packets)
TCP SYN -> 192.168.25.20:80
TCP SYN -> 192.168.25.20:443
TCP SYN -> 192.168.25.20:22
EOF

echo "   ‚úÖ Arquivo de demonstra√ß√£o criado"

# 3. Simular an√°lise do Suricata
echo ""
echo "üìä Simulando an√°lise do Suricata..."
echo "   (Em um ambiente real, Suricata analisaria o tr√°fego em tempo real)"

# 4. Mostrar o que Suricata detectaria
echo ""
echo "üîç RESULTADOS DA AN√ÅLISE (SIMULADOS):"
echo "======================================"

echo ""
echo "üö® ALERTAS DETECTADOS:"
echo "   ‚úÖ [LAB25] Acesso √† √°rea administrativa detectado"
echo "      - URL: /admin"
echo "      - SID: 1000001"
echo "      - Severidade: ALTO"

echo ""
echo "   ‚úÖ [LAB25] Poss√≠vel SQL Injection detectado"
echo "      - Payload: ' OR '1'='1"
echo "      - SID: 1000003"
echo "      - Severidade: CR√çTICO"

echo ""
echo "   ‚úÖ [LAB25] Poss√≠vel XSS detectado - tag script"
echo "      - Payload: <script>alert('xss')</script>"
echo "      - SID: 1000002"
echo "      - Severidade: CR√çTICO"

echo ""
echo "   ‚úÖ [LAB25] User-Agent suspeito detectado"
echo "      - User-Agent: sqlmap"
echo "      - SID: 1000005"
echo "      - Severidade: M√âDIO"

echo ""
echo "   ‚úÖ [LAB25] Poss√≠vel scan de portas - SYN"
echo "      - Flags: SYN"
echo "      - SID: 1000006"
echo "      - Severidade: M√âDIO"

echo ""
echo "üìà ESTAT√çSTICAS:"
echo "   - Total de alertas: 5"
echo "   - Alertas cr√≠ticos: 2"
echo "   - Alertas altos: 1"
echo "   - Alertas m√©dios: 2"

echo ""
echo "üí° COMO FUNCIONA EM TEMPO REAL:"
echo "   1. Suricata monitora continuamente o tr√°fego de rede"
echo "   2. Aplica as regras de detec√ß√£o em tempo real"
echo "   3. Gera alertas imediatamente quando detecta padr√µes suspeitos"
echo "   4. Registra todos os eventos no arquivo eve.json"

echo ""
echo "üéØ PR√ìXIMOS PASSOS PARA O LAB:"
echo "   1. Configurar rede para interceptar tr√°fego real"
echo "   2. Implementar captura de pacotes em tempo real"
echo "   3. Configurar notifica√ß√µes autom√°ticas"
echo "   4. Integrar com ferramentas de SIEM"

echo ""
echo "üìÅ Arquivos criados:"
echo "   - ./suricata/demo/malicious_traffic.pcap.txt"
echo "   - ./suricata/logs/eve.json (logs atuais do Suricata)"
